#!/usr/bin/env python3
from multiprocessing import Pool
from os import linesep
from pathlib import Path
from shutil import which
from subprocess import run, CalledProcessError, DEVNULL, PIPE
from textwrap import indent
from typing import List, Union


class TermColor:
    BLACK: str = '\033[30m'
    RED: str = '\033[31m'
    GREEN: str = '\033[32m'
    YELLOW: str = '\033[33m'
    BLUE: str = '\033[34m'
    MAGENTA: str = '\033[35m'
    CYAN: str = '\033[36m'
    WHITE: str = '\033[37m'
    RESET: str = '\033[0m'


def normalize_command_group(command_group: Union[str, list]) -> List[str]:
    if isinstance(command_group, list):
        return command_group
    elif isinstance(command_group, str):
        return [command_group]
    else:
        print(TermColor.RED + 'Invalid command format.' + linesep + 'Exiting...')
        exit(-1)


def any_params_contain_git_dir(command_parameters: List[str]) -> bool:
    for parameter in command_parameters:
        if Path(parameter + '/.git').is_dir():
            return True
    return False


def run_command(commands: Union[str, list]):
    commands_group = normalize_command_group(commands)

    for command in commands_group:
        command_parameters = command.split(' ')
        executable = command_parameters[0]

        # Check if the executable actually exists
        if which(executable) is None:
            print('Command ' + TermColor.MAGENTA + executable + TermColor.RESET + ' not found')
            continue

        # Check for git dir before trying git on it
        if executable == 'git' or executable == 'up-git':
            if not any_params_contain_git_dir(command_parameters[1:]):
                print(TermColor.YELLOW + ' '.join(command_parameters) + TermColor.RESET + ' git directory not found')
                continue

        try:
            print(TermColor.CYAN + command + TermColor.RESET + ' starting')
            # Actually run
            run(command_parameters, check=True, stdout=DEVNULL, stderr=PIPE, universal_newlines=True)
            print(TermColor.GREEN + command + TermColor.RESET + ' complete')
        except CalledProcessError as called_process_error:
            message = called_process_error.stderr or 'No Message'
            indented_message = indent(message, '  ')
            print(TermColor.RED + command + TermColor.RESET + ' error' + linesep + TermColor.RED + indented_message)


def main():
    pool = Pool()
    home = str(Path.home())
    commands = [
        # homebrew https://brew.sh/
        ['brew update', 'brew outdated', 'brew upgrade', 'brew cleanup'],
        # yarn https://yarnpkg.com/en/
        'yarn global upgrade',
        # composer https://getcomposer.org/
        'composer global update',
        # oh-my-zsh https://ohmyz.sh/
        f"git -C {home}/.oh-my-zsh pull --rebase --stat origin master",
        # oh-my-zsh custom plugins https://github.com/robbyrussell/oh-my-zsh/wiki/Customization#overriding-and-adding-plugins
        f"up-git {home}/.oh-my-zsh",
        # pip https://pypi.org/project/pip/
        'up-pip',
        # vim-plug https://github.com/junegunn/vim-plug
        'vim -c PlugUpdate -c PlugUpgrade -c quitall',
        # pecl https://pecl.php.net/
        ['pecl update-channels', 'pecl upgrade']
    ]
    pool.map(run_command, commands)


if __name__ == '__main__':
    main()
