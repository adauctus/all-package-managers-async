#!/usr/bin/env python3
from abc import ABC, abstractmethod
from multiprocessing import cpu_count, JoinableQueue, Process
from os import linesep
from pathlib import Path
from pkg_resources import working_set
from shutil import which
from subprocess import CalledProcessError, DEVNULL, PIPE, run
from sys import executable
from textwrap import indent
from types import FunctionType
from typing import Callable, Generator, List, Optional, Union


# Helper Classes
class TermStyle:
    RESET: str = '\033[0m'
    BOLD: str = '\033[1m'
    NO_BOLD: str = '\033[21m'
    DIM: str = '\033[2m'
    NO_DIM: str = '\033[22m'
    UNDERLINE: str = '\033[4m'
    NO_UNDERLINE: str = '\033[24m'
    BLINK: str = '\033[5m'
    NO_BLINK: str = '\033[25m'
    REVERSE: str = '\033[7m'
    NO_REVERSE: str = '\033[27m'
    BLACK: str = '\033[30m'
    RED: str = '\033[31m'
    GREEN: str = '\033[32m'
    YELLOW: str = '\033[33m'
    BLUE: str = '\033[34m'
    MAGENTA: str = '\033[35m'
    CYAN: str = '\033[36m'
    LIGHT_GRAY: str = '\033[37m'
    DARK_GRAY: str = '\033[90m'
    LIGHT_RED: str = '\033[91m'
    LIGHT_GREEN: str = '\033[92m'
    LIGHT_YELLOW: str = '\033[93m'
    LIGHT_BLUE: str = '\033[94m'
    LIGHT_MAGENTA: str = '\033[95m'
    LIGHT_CYAN: str = '\033[96m'
    WHITE: str = '\033[97m'
    BG_DEFAULT: str = '\033[49m'
    BG_BLACK: str = '\033[40m'
    BG_RED: str = '\033[41m'
    BG_GREEN: str = '\033[42m'
    BG_YELLOW: str = '\033[43m'
    BG_BLUE: str = '\033[44m'
    BG_MAGENTA: str = '\033[45m'
    BG_CYAN: str = '\033[46m'
    BG_LIGHT_GRAY: str = '\033[47m'
    BG_DARK_GRAY: str = '\033[100m'
    BG_LIGHT_RED: str = '\033[101m'
    BG_LIGHT_GREEN: str = '\033[102m'
    BG_LIGHT_YELLOW: str = '\033[103m'
    BG_LIGHT_BLUE: str = '\033[104m'
    BG_LIGHT_MAGENTA: str = '\033[105m'
    BG_LIGHT_CYAN: str = '\033[106m'
    BG_WHITE: str = '\033[107m'


# Native Command Calls
def up_pip(**kwargs):
    packages = [dist.project_name for dist in working_set]
    full_command = [executable, '-m', 'pip', 'install', '--upgrade'] + packages
    run(full_command, **kwargs)


# Command Classes
class Command(ABC):
    @abstractmethod
    def get_function(self, queue: JoinableQueue, **kwargs) -> FunctionType:
        pass

    @abstractmethod
    def isvalid(self) -> bool:
        pass


class NativeCommand(Command):
    def __init__(self, native_call: Callable, description: Optional[str]):
        self.__native_call = native_call
        self.__description = description

    def get_function(self, queue: JoinableQueue, **kwargs) -> FunctionType:
        return self.__native_call

    def isvalid(self) -> bool:
        return True

    def __repr__(self):
        from inspect import getsource
        return getsource(self.__native_call)

    def __str__(self):
        return str(self.__description) or 'Native Code'


class ShellCommand(Command):
    def __init__(self, full_command: str):
        self.__full_command = full_command

    def __command_parts(self):
        return self.__full_command.split(' ')

    def __executable(self):
        return self.__command_parts()[0]

    def get_function(self, queue: JoinableQueue, **kwargs) -> FunctionType:
        def func():
            run(self.__command_parts(), **kwargs)

        return func

    def isvalid(self) -> bool:
        return which(self.__command_parts()[0]) is not None

    def __repr__(self):
        return self.__full_command

    def __str__(self):
        return self.__executable()


class GitResetCommand(ShellCommand):
    def __init__(self, path: Path):
        self.__path = path
        super().__init__('git -C ' + str(path.absolute()) + ' reset --hard @{upstream}')

    def isvalid(self) -> bool:
        return self.__path.joinpath('.git').is_dir()

    def __repr__(self):
        return super().__repr__()

    def __str__(self):
        return 'git reset on ' + str(self.__path)


class GitFetchCommand(ShellCommand):
    def __init__(self, path: Path):
        self.__path = path
        super().__init__('git -C ' + str(path.absolute()) + ' fetch --all')

    def isvalid(self) -> bool:
        return self.__path.joinpath('.git').is_dir()

    def __repr__(self):
        return super().__repr__()

    def __str__(self):
        return 'git fetch on ' + str(self.__path)


class RecursiveGitCommand(Command):
    def __init__(self, path: Path):
        self.__path = path

    def __git_directories(self) -> Generator[Path, None, None]:
        # find directories that contain a .git folder
        return self.__path.glob('**/.git')

    def get_function(self, queue: JoinableQueue, **kwargs) -> FunctionType:
        def func():
            # create commands
            git_commands = [[GitFetchCommand(git.parent), GitResetCommand(git.parent)]
                            for git in self.__git_directories()]
            # add them to the queue
            for git_command_pair in git_commands:
                queue.put(git_command_pair)

        return func

    def isvalid(self) -> bool:
        return len(list(self.__git_directories())) > 0

    def __repr__(self):
        return 'recursive git of ' + str(self.__path)


def command_factory(command: Union[Command, str, Path, FunctionType]) -> Command:
    if isinstance(command, Command):
        return command
    elif isinstance(command, str):
        return ShellCommand(command)
    elif isinstance(command, Path):
        return GitResetCommand(command)
    elif isinstance(command, FunctionType):
        return NativeCommand(command, None)


def read_process(queue: JoinableQueue):
    while True:
        # retrieve task (command)
        command = queue.get()
        # execute command
        run_command(command, queue)
        # let the queue know to remove it
        queue.task_done()


# run command set
def run_command(commands: List[Command], queue: JoinableQueue):
    for command in commands:
        # Check if the command can run
        if not command.isvalid():
            print('Command ' + TermStyle.MAGENTA + repr(command) + TermStyle.RESET + ' is invalid')
            continue
        try:
            print(TermStyle.CYAN + str(command) + TermStyle.RESET + ' starting')
            # create run call
            to_run = command.get_function(queue, check=True, stdout=DEVNULL, stderr=PIPE, universal_newlines=True)
            # go!
            to_run()
            print(TermStyle.GREEN + str(command) + TermStyle.RESET + ' complete')
        except CalledProcessError as called_process_error:
            message = called_process_error.stderr or 'No Message'
            indented_message = indent(message, '  ')
            print(
                TermStyle.RED + str(command) + TermStyle.RESET + ' error' + linesep + TermStyle.RED + indented_message)


def main():
    commands = [
        # Composer https://getcomposer.org/
        ['composer global update'],

        # Homebrew https://brew.sh/
        ['brew update', 'brew outdated', 'brew upgrade', 'brew cleanup'],

        # Oh My Zsh https://ohmyz.sh/
        [RecursiveGitCommand(Path.home().joinpath('.oh-my-zsh'))],

        # npm https://www.npmjs.com/
        ['for package in $(npm -g outdated --parseable --depth=0 | cut -d: -f2); do npm -g install "$package"; done'],

        # pathogen.vim https://github.com/tpope/vim-pathogen
        ['pathogen=' + str(Path.home().joinpath('.vim/autoload/pathogen.vim')) +
         ' && test -e $pathogen' +
         ' && rm $pathogen' +
         ' && curl -LSso $pathogen https://tpo.pe/pathogen.vim',
         RecursiveGitCommand(Path.home().joinpath('.vim/bundle'))],

        # PECL https://pecl.php.net/
        ['pecl update-channels', 'pecl upgrade'],

        # pip https://pypi.org/project/pip/
        [NativeCommand(up_pip, 'update pip')],

        # Ruby Gems https://rubygems.org/
        ['gem update', 'gem cleanup'],

        # vim 8 native plugin :help packages
        # TODO: load these paths from the packpath option
        # [
        #     RecursiveGitCommand(Path.home().joinpath('.vim')),
        #     RecursiveGitCommand(Path('/usr/local/share/vim/vimfiles')),
        #     RecursiveGitCommand(Path('/usr/local/share/vim/vim81')),
        #     RecursiveGitCommand(Path('/usr/local/share/vim/vimfiles/after')),
        #     RecursiveGitCommand(Path.home().joinpath('/.vim/after'))
        # ],

        # vim-plug https://github.com/junegunn/vim-plug
        ['vim -c PlugUpgrade -c PlugUpdate -c quitall'],

        # Vundle.vim
        [RecursiveGitCommand(Path.home().joinpath('.vim/bundle/Vundle.vim')), 'vim -c PluginUpdate -c quitall'],

        # Yarn https://yarnpkg.com/en/
        ['yarn global upgrade'],
    ]

    # list comprehension of commands to command objects
    command_objects = [[command_factory(command) for command in command_list] for command_list in commands]

    # create task queue
    task_queue = JoinableQueue()

    # start worker processes
    for i in range(cpu_count()):
        reader_p = Process(target=read_process, args=(task_queue,))
        reader_p.daemon = True
        reader_p.start()

    # Add commands created above to the task queue
    for command_set in command_objects:
        task_queue.put(command_set)

    # cleanup
    task_queue.join()


if __name__ == '__main__':
    main()
